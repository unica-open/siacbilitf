/*
*SPDX-FileCopyrightText: Copyright 2020 | CSI Piemonte
*SPDX-License-Identifier: EUPL-1.2
*/
package it.csi.siac.pcc.marc.services.webservices_1_0;

import java.net.URL;
import java.net.URLClassLoader;
import java.util.GregorianCalendar;

import org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean;

import it.csi.siac.pcc.marc.schema.marccommontypes_1.ResultType;

/**
 * This class was generated by Apache CXF 2.4.6
 * 2016-04-04T18:30:30.387+02:00
 * Generated source version: 2.4.6
 * 
 */
public final class MarcProxyServicePortType_MarcProxyServiceHttpsSoap11Endpoint_ClientSpring {


    private MarcProxyServicePortType_MarcProxyServiceHttpsSoap11Endpoint_ClientSpring() {
    }

    public static void main(String args[]) throws java.lang.Exception {
    	
    	
    	MarcWSPortType port = ((MarcWSPortType) getService(MarcWSPortType.class,
    			    "MarcProxyService", "http://www.csi.it/marc/services/webservices-1.0",
    			    "http://tst-srv-marc.bilancio.csi.it:80/wso004/services/MarcProxyService", 
    			    "http://tst-srv-marc.bilancio.csi.it:80/wso004/services/MarcProxyService?wsdl",
    			    "MarcProxyServiceHttpSoap11Endpoint"
    			    )
    			    );
    	
    	
    	
    	

//    	MarcSOAPService ss = new MarcSOAPService();
    	
//        MarcWSPortType port = ss.getMarcSOAPPortSoap11();//ProxyServiceHttpsSoap11Endpoint();  
        
        System.out.println("Invoking invioOperazioneContabile...");
//        it.csi.marc.schema.marcservicestypes_1.InvioOperazioneContabile _invioOperazioneContabile_parameters = new it.csi.marc.schema.marcservicestypes_1.InvioOperazioneContabile();
        it.tesoro.fatture.ProxyOperazioneContabileRichiestaTipo _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabile = new it.tesoro.fatture.ProxyOperazioneContabileRichiestaTipo();
        it.tesoro.fatture.TestataAsyncTipo _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileTestataRichiesta = new it.tesoro.fatture.TestataAsyncTipo();
        _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileTestataRichiesta.setCodiceFiscaleTrasmittente("CodiceFiscaleTrasmittente-1370382531");
        _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileTestataRichiesta.setTimestampTrasmissione(new GregorianCalendar());
        _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileTestataRichiesta.setVersioneApplicativa("VersioneApplicativa1959864063");
        _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileTestataRichiesta.setIdentificativoPCCAmministrazione(Long.valueOf(3983223785501105926l));
        _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileTestataRichiesta.setIdentificativoTransazionePA("IdentificativoTransazionePA1519509199");
        _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabile.setTestataRichiesta(_invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileTestataRichiesta);
        it.tesoro.fatture.DatiRichiestaOperazioneContabileProxyTipo _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiesta = new it.tesoro.fatture.DatiRichiestaOperazioneContabileProxyTipo();
        _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiesta.setIdentificazionePCC("IdentificazionePCC-1528713838");
        it.tesoro.fatture.IdentificazioneSDITipo _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiestaIdentificazioneSDI = new it.tesoro.fatture.IdentificazioneSDITipo();
        _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiestaIdentificazioneSDI.setLottoSDI(new java.math.BigDecimal("6083883524696072801.4019314061027323565"));
        _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiestaIdentificazioneSDI.setNumeroFattura("NumeroFattura1443444435");
        _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiesta.setIdentificazioneSDI(_invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiestaIdentificazioneSDI);
        it.tesoro.fatture.IdentificazioneGeneraleTipo _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiestaIdentificazioneGenerale = new it.tesoro.fatture.IdentificazioneGeneraleTipo();
        _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiestaIdentificazioneGenerale.setNumeroFattura("NumeroFattura-1925637901");
        _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiestaIdentificazioneGenerale.setDataEmissione(new GregorianCalendar());
        _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiestaIdentificazioneGenerale.setImportoTotaleDocumento(new java.math.BigDecimal("-7101096833527883999.3968382954214014187"));
        _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiestaIdentificazioneGenerale.setIdFiscaleIvaFornitore("IdFiscaleIvaFornitore221223501");
        _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiesta.setIdentificazioneGenerale(_invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiestaIdentificazioneGenerale);
        it.tesoro.fatture.ListaOperazioneTipo _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiestaListaOperazione = new it.tesoro.fatture.ListaOperazioneTipo();
        java.util.List<it.tesoro.fatture.OperazioneTipo> _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiestaListaOperazioneOperazione = new java.util.ArrayList<it.tesoro.fatture.OperazioneTipo>();
        _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiestaListaOperazione.getOperazione().addAll(_invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiestaListaOperazioneOperazione);
        _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiesta.setListaOperazione(_invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiestaListaOperazione);
        _invioOperazioneContabile_parametersDatiRichiestaOperazioneContabile.setDatiRichiesta(_invioOperazioneContabile_parametersDatiRichiestaOperazioneContabileDatiRichiesta);
//        _invioOperazioneContabile_parameters.setDatiRichiestaOperazioneContabile(_invioOperazioneContabile_parametersDatiRichiestaOperazioneContabile);
        
        //(_invioOperazioneContabile_parameters);
        ResultType result = port.invioOperazioneContabile(_invioOperazioneContabile_parametersDatiRichiestaOperazioneContabile);
        
        System.out.println("result: "+ result.getCodice() + " messaggio: " + result.getMessaggio());


        printcp();
        System.exit(0);
    }
    
    
    
    
    
    
    
    
    

    public static <T> T getService(Class<T> serviceInterface, String serviceName, String namespaceUri,
      String endpointAddress, String wsdlDocumentUrl, 
      String port
     ) throws Exception {
     
     
  
     JaxWsPortProxyFactoryBean factory = new JaxWsPortProxyFactoryBean();

     factory.setServiceInterface(serviceInterface);
     factory.setWsdlDocumentUrl(new URL(wsdlDocumentUrl));
     factory.setNamespaceUri(namespaceUri);
     factory.setServiceName(serviceName);
     factory.setEndpointAddress(endpointAddress);
     factory.setPortName(port);
     //factory.setHandlerResolver(handlerResolver);
     factory.afterPropertiesSet();

     @SuppressWarnings("unchecked")
     T srv = (T) factory.getObject();

     return srv;
    }
    
    private static void printcp()
    {
     ClassLoader cl = ClassLoader.getSystemClassLoader();

           URL[] urls = ((URLClassLoader)cl).getURLs();

           for(URL url: urls){
            System.err.println(url.getFile());
           }  
    }

}
